#!/bin/bash
# Git supported

tar_()
{
   # On enleve les repertoires en ne prenant que les liens
   # et les fichiers. Attention c'est different de [ ! -d ]
   # car certains liens sont aussi des repertoires...
   contenu_files=`mktemp_`
   for item in `cat $2`
   do
      if [ -f $item ] || [ -h $item ]
      then
         echo $item >> $contenu_files
      fi
   done
   cat $contenu_files | xargs tar rf $1
   rm -f $contenu_files
}
gzip_()
{
   gzip -f $1
}

fonction()
{
   contenu=build/$VOB.files
   if [ $files_only = 1 ]
   then
      if [ $src_only = 1 ]
      then
         echo "Creation of $contenu only"
      else
         echo "Creation of $contenu and build/External.files only"
      fi
   else
      if [ $without_version = 1 ]
      then
         echo "Creation of "$VOB".tar.gz (See "$contenu")"
         [ $src_only = 0 ] && echo "Creation of externalpackages.tar (See build/External.files)"
      else
         echo "Creation of "$VOB"-"$TRUST_VERSION".tar.gz (See "$contenu")"
         [ $src_only = 0 ] && echo "Creation of externalpackages-"$TRUST_VERSION".tar (See build/External.files)"
      fi
   fi
}

echo "Usage: `basename $0` [-src_only] [-without_test_validation] [-files_only] [-without_version]"
echo `basename $0` $*

rm -f $TRUST_ROOT/build/*.files
rm -f $TRUST_ROOT/*.tar.gz
rm -f $TRUST_ROOT/externalpackages*.tar
#rm -f $TRUST_ROOT/*.md5


###################################################
# Creation du fichier .tar des composants de TRUST
###################################################
src_only=0
without_test_validation=0
files_only=0
without_version=0

while [ "$1" != "" ]
do
   [ "$1" = "-src_only" ] && src_only=1 && shift && continue
   [ "$1" = "-files_only" ] && files_only=1 && shift && continue
   [ "$1" = "-without_test_validation" ] && without_test_validation=1 && shift && continue
   [ "$1" = "-without_version" ] && without_version=1 && shift && continue
   echo "Unknown option : $1" && exit -1
done
filtre="je_ne_filtre_rien_du_tout" && [ "$without_test_validation" = 1 ] && filtre="tests/Validation"

##############
# VOB TRUST #
##############
cd $TRUST_ROOT
Build=$TRUST_ROOT/build
[ ! -d ${Build} ] && echo Creating ${Build} directory && mkdir -p ${Build}
VOB="TRUST"

fonction

if [ -d $TRUST_ROOT/.git ]
then
   git ls-files | grep -v $filtre > build/Src.files
   if [ $? != 0 ]
   then
      echo "Error !"
      exit -1
   fi
   # mise a jour de la doc pdf geree en gestion de configuration mais genere a un autre endroit
   [ -f $TRUST_ROOT/Outils/TRIOXDATA/XTriou/Keywords.txt ] && cp $TRUST_ROOT/Outils/TRIOXDATA/XTriou/Keywords.txt  $TRUST_ROOT/doc/TRUST/Keywords.txt
   [ -f $TRUST_ROOT/Outils/TRIOXDATA/XTriou/doc.pdf ] && cp $TRUST_ROOT/Outils/TRIOXDATA/XTriou/doc.pdf  $TRUST_ROOT/doc/TRUST/TRUST_Reference_Manual.pdf
   # ajout de la doc pdf non geree en gestion de configuration
   #echo doc/TRUST/TRUST_tutorial.pdf >> build/Src.files
   #echo doc/TRUST/exercices/Tutorial_solutions.pdf >> build/Src.files
   #echo doc/TRUST/Baltik_tutorial.pdf >> build/Src.files
   if [ ! -f "doc/TRUST/TRUST_Generic_documentation.pdf" ] || [ ! -f "doc/TRUST/TRUST_tutorial.pdf" ] || [ ! -f "doc/TRUST/exercices/Tutorial_solutions.pdf" ] || [ ! -f "doc/TRUST/Baltik_tutorial.pdf" ]
   then
      echo "Error doc !"
      [ "$without_version" = 0 ] && exit -1
   fi
   # Marquage de la version
   date > .DATE
   echo .DATE >> build/Src.files
   # ajout du log pour identifier l'archive
   if [ $without_version = 1 ]
   then
      git log -1 > .git_log
      echo .git_log >> build/Src.files
   fi
   # external package
   if [ $src_only = 0 ]
   then
      cd externalpackages
      git ls-files 1>/dev/null
      if [ $? != 0 ]
      then
         echo "Error !"
         exit -1
      fi
      # ajout du log pour identifier l'archive
      if [ $without_version = 1 ]
      then
         git log -1 > .git_log
         echo "externalpackages/".git_log > ../build/External.files
      fi
      for file in `git ls-files`
      do
         echo "externalpackages/"$file >> ../build/Src.files
         echo "externalpackages/"$file >> ../build/External.files
      done
      cd ..
   fi
   # Creation *.tar.gz
   #sleep 1
   #if [ $files_only = 0 ]
   #then
   #   tar_ $VOB.tar build/Src.files
   #   gzip_ $VOB.tar
   #fi
   # New creation *.tar.gz
   BASE=`basename $TRUST_ROOT`
   for file in `cat build/Src.files`
   do
      if [ -f $file ] || [ -h $file ]
      then
         echo $BASE/$file
      fi
   done > $contenu
   rm -f build/Src.files
   if [ $files_only = 0 ]
   then
      cd ..
      if [ $without_version = 1 ]
      then
         tar zcf $BASE/TRUST.tar.gz  `cat $BASE/$contenu`
         cd $BASE
         [ $src_only = 0 ] && tar cf externalpackages.tar  `cat build/External.files`
      else
         tar zcf $BASE/TRUST-${TRUST_VERSION}.tar.gz  --transform=s?$BASE?${BASE}-${TRUST_VERSION}? `cat $BASE/$contenu`
         cd $BASE
         #md5sum TRUST-${TRUST_VERSION}.tar.gz > TRUST-${TRUST_VERSION}.tar.gz.md5
         if [ $src_only = 0 ]
         then
            tar cf externalpackages-${TRUST_VERSION}.tar  `cat build/External.files`
	    #md5sum externalpackages-${TRUST_VERSION}.tar > externalpackages-${TRUST_VERSION}.tar.md5
         fi
      fi
   fi
else
   echo "Error, no Git."
   exit -1
fi
