#!/bin/bash
[ "$TRUST_ROOT" = "" ] && echo "TRUST environment not initialized." && exit -1

cd $TRUST_ROOT
########
# PETSC
#######
PETSC=""
PETSC_LIB=$PETSC_ROOT/$TRUST_ARCH$OPT/lib
MPIFORT=""
petscmachineinfo=""
SYSLIBS=""
if [ -d $PETSC_LIB ]
then
   cd $PETSC_LIB
   if [ -f libpetsc.a ]
   then
      PETSC="-L\$(PETSC_ROOT)/\$(TRUST_ARCH)\$(OPT)/lib -lpetsc"
      # -ldl pour Petsc 3.0.0 necessaire sur certaines machines avec GNU un peu ancien
      SYSLIBS=$SYSLIBS" -ldl"
      superlu=`ls libsuperlu_dist*.a 2>/dev/null` && superlu=${superlu#lib} && PETSC=$PETSC" -l${superlu%.a}"
      [ -f libcmumps.a ] && PETSC=$PETSC" -lcmumps -ldmumps -lmumps_common -lsmumps -lzmumps -lpord"
      [ -f libpastix.a ] && PETSC=$PETSC" -lpastix"
      [ -f libml.a ] && PETSC=$PETSC" -lml"
      for lib in HYPRE scalapack blacs spai parms parmetis metis ptesmumps ptscotcherr ptscotcherrexit ptscotchparmetis ptscotch scotch scotcherr scotcherrexit Vc
      do
         [ -f lib$lib.a ] && PETSC=$PETSC" -l$lib"
      done
      [ -f libumfpack.a ] && PETSC=$PETSC" -lumfpack -lklu -lcholmod -lbtf -lccolamd -lcolamd -lcamd -lamd -lsuitesparseconfig" && [ `uname -s` != Darwin ] && SYSLIBS=$SYSLIBS" -lrt"

      # Link avec les librairies statiques de CUDA:
      # Pros: Portability ?
      # Cons: Binary size 74Go -> 900Go ! Crash possible sur orcus (Caught amgx exception: Cannot allocate pinned memory) si on utilise la librairie statique AmgX avec -lamgx !
      LINK_CUDA=_static
      LINK_CUDA=""
      #[ "$TRUST_USE_CUDA" = 1 ] && AMGX_ROOT="\$(TRUST_ROOT)/lib/src/LIBAMGX" && PETSC=$PETSC" -L$AMGX_ROOT/AmgX/lib -lamgx`[ "$LINK_CUDA" != _static ] && echo sh` -L$AMGX_ROOT/AmgXWrapper/lib64 -lAmgXWrapper -lomp" # -lomp necessaire sur portable mais echec sur petra ?
      [ "$TRUST_USE_CUDA" = 1 ] && AMGX_ROOT="\$(TRUST_ROOT)/lib/src/LIBAMGX" && PETSC=$PETSC" -L$AMGX_ROOT/AmgX/lib -lamgx`[ "$LINK_CUDA" != _static ] && echo sh` -L$AMGX_ROOT/AmgXWrapper/lib64 -lAmgXWrapper"
      # Le fichier suivant pourrait peut etre permettre de simplifier les choses precedantes:
      # car desormais on l'utilise pour avoir le nombre des librairies BLAS optimisees et des librairies eventuelles CUDA
      petscmachineinfo=$PETSC_ROOT/$TRUST_ARCH$OPT/include/petscmachineinfo.h
      if [ -f $petscmachineinfo ]
      then
         # CUDA trouve et qui fonctionne sur la machine (test fait dans $PETSC_ROOT/GPU)
         if [ "$TRUST_USE_CUDA" = 1 ]
         then
            PETSC=$PETSC" `awk -v LINK_CUDA=$LINK_CUDA '/Using libraries/ && /cuda/ { for (i=1;i<=NF;i++) {if (index($i,"/cuda")) libs=libs" "$i;if (index($i,"-lcu")) libs=libs" "$i""LINK_CUDA;}} END {print libs}' $petscmachineinfo`"
            # Si PETSc n'avait pas le support Cuda active, on essaie d'ajouter les librairies necessaires:
            if [ "`echo $PETSC | grep lcuda`" = "" ]
            then
	       # ToDo comme dans install de AmgX et PETSc, factoriser dans configure_env la recherche de CUDA_MATH
               PETSC=$PETSC" -L$CUDA_ROOT/lib64 -L$CUDA_ROOT/stubs -L`echo $CUDA_ROOT | sed '1,$ s?/cuda?/math_libs?g'`/lib64 -lcudart -lcublas -lcublasLt -lcufft -lcusparse -lcusolver"
            fi   
            # -lnvToolsExt: ajoute suite undefined reference sur cobalt:
            PETSC=$PETSC" -lnvToolsExt"
            # En statique:
            [ "$LINK_CUDA" = _static ] && PETSC=$PETSC" -lcublasLt_static -lculibos -lrt"
         fi
         # PETSc with X11:
         [ "`grep lX11 $PETSC_ROOT/$TRUST_ARCH$OPT/include/petscmachineinfo.h 2>/dev/null`" != "" ] && SYSLIBS=$SYSLIBS" -lX11"

         # PETSc without MPI:
         if [ "$TRUST_DISABLE_MPI" = 1 ]
         then
            PETSC=$PETSC" -lmpiseq"
	    SYSLIBS=$SYSLIBS" -lpthread"
         else
            for libfort in lmpifort lmpi_f77
            do
               if [ "`grep $libfort $PETSC_ROOT/$TRUST_ARCH$OPT/include/petscmachineinfo.h 2>/dev/null`" != "" ]
               then
                  MPIFORT=" -L\$(MPI_ROOT)/lib -${libfort} "
               fi
            done
         fi
         [ "`grep lssl     $PETSC_ROOT/$TRUST_ARCH$OPT/include/petscmachineinfo.h 2>/dev/null`" != "" ] && SYSLIBS=$SYSLIBS" -lssl -lcrypto"
         [ "`grep lpthread $PETSC_ROOT/$TRUST_ARCH$OPT/include/petscmachineinfo.h 2>/dev/null`" != "" ] && SYSLIBS=$SYSLIBS" -lpthread"
      fi
   fi
   \cd - 1>/dev/null 2>&1
else
   #######
   # METIS
   #######
   if [ -f $METIS_ROOT/lib/libmetis.a ]
   then
      METIS="-L\$(METIS_ROOT)/lib -lmetis"
   else
      METIS=""
   fi
fi

#############
# Lapack/Blas
#############
if [ "$TRUST_BLAS_LAPACK" = "" ]
then
    LAPACK="-L\$(TRUST_LIB)/src/LIBLAPACK -llapack -lblas"
else
    #LAPACK="\$(TRUST_BLAS_LAPACK)/liblapack.a \$(TRUST_BLAS_LAPACK)/libblas.a"
    # Don't use static libraries cause problem when linking module for Baltik (not -fPIC compiled)
    if [ -f $TRUST_BLAS_LAPACK/libopenblas.so ]
    then
       # Prefer openblas if founded:
       LAPACK="-L\$(TRUST_BLAS_LAPACK) -lopenblas"
    elif [ -f $TRUST_BLAS_LAPACK/libsci_cray.a ]
    then
       LAPACK="-L\$(TRUST_BLAS_LAPACK) -lsci_cray"
    else
       LAPACK="-L\$(TRUST_BLAS_LAPACK) -llapack -lblas"
    fi
    # BLAS/LAPACK Intel (mkl) libraries have different names so try to find it thanks to PETSc
    if [ "$petscmachineinfo" != "" ] && [ "`grep mkl_ $petscmachineinfo`" != "" ]
    then
        # Since Pastix has been added (threaded), with GNU compilers and MKL library, -lgomp should be added if found:
        LAPACK="-L$TRUST_BLAS_LAPACK  `awk '/mkl/ { for (i=1;i<=NF;i++) if (index($i,"-lmkl") || index($i,"/mkl/lib") || index($i,"/mkl/latest/lib") || ($i=="-lgomp")) libs=libs" "$i;} END {print libs}' $petscmachineinfo`"
    fi
fi

#####
# MED
#####
MEDLDFLAGS=""
# Cela devient complique pour trouve s'il faut ajouter -lz ou pas...
lz=""
if [ -f $TRUST_MED_ROOT/bin/h5cc ]
then
   # Meilleur moyen: si MED est compile on regarde dans h5cc
   [ "`grep lz $TRUST_MED_ROOT/bin/h5cc`" != "" ] && lz="-lz "
else
   # Sinon, on regarde si la librairie existe... Mais attention on ne verifie pas si elle est 32 ou 64 bits...
   [ "`ls /usr/lib*/libz.a /lib/libz.so* 2>/dev/null`" != "" ] && lz="-lz "
fi

# Ajout des flags -lsvml et -lintlc necessaires avec certains compilateurs intel... vu sur jean-zay et plafrim
if [ -f  $TRUST_MED_ROOT/lib/libhdf5.so ]
then
   svmlpath=""
   if [ "`ldd $TRUST_MED_ROOT/lib/libhdf5.so | grep libsvml.so`" != "" ]
   then
      lz=$lz"-lsvml "
      svmlso=`ldd $TRUST_MED_ROOT/lib/libhdf5.so | grep libsvml.so | cut -d' ' -f 3`
      svmlpath=`dirname $svmlso`
      lz=" -L$svmlpath "$lz
   fi

   intlcpath=""
   if [ "`ldd $TRUST_MED_ROOT/lib/libhdf5.so | grep libintlc.so`" != "" ]
   then
      lz=$lz"-lintlc "
      intlcso=`ldd $TRUST_MED_ROOT/lib/libhdf5.so | grep libintlc.so | cut -d' ' -f 3`
      intlcpath=`dirname $intlcso`
      [ "$svmlpath" != "$intlcpath" ] && lz=" -L$intlcpath "$lz
   fi
fi
MEDLDFLAGS="\$(TRUST_MED_ROOT)/lib/libmed.a \$(TRUST_MED_ROOT)/lib/libmedimport.a \$(TRUST_MED_ROOT)/lib/libmedC.a \$(TRUST_MED_ROOT)/lib/libhdf5.a \$(TRUST_MED_ROOT)/lib/libhdf5_hl.a"

#############
# MEDCoupling
#############
LISTP="" && [ "$TRUST_DISABLE_MPI" != 1 ] && LISTP="paramedmem paramedloader" 
LIBS_MEDC=""
for ll in medloader medcouplingremapper medcoupling medicoco $LISTP interpkernel
do
    LIBS_MEDC=${LIBS_MEDC}" \$(TRUST_MEDCOUPLING_ROOT)/lib/lib${ll}.a"
done

####
# VC
####
VC="" && [ "$TRUST_DISABLE_VC" != 1 ] && VC="-L\$(TRUST_ROOT)/lib/src/LIBVC/lib -lVc"

#####
# EOS
#####
if [ $TRUST_USE_EOS = 1 ] ; then
  EOS="\$(TRUST_EOS_HOME_DIR)/lib/libeos.a"
else
  EOS=""
fi

##########
# CoolProp
##########
if [ $TRUST_USE_COOLPROP = 1 ] ; then
  COOLPROP="\$(TRUST_COOLPROP_HOME_DIR)/build/libCoolProp.a"
else
  COOLPROP=""
fi

# Cela m'a fait transpirer: si -lm alors -L/usr/lib/x86_64-linux-gnu ajoute et conflit entre MPI systeme et MPI livre si mix nvc++/g++:
# Si TRUST_CC_BAXE_EXTP GNU et le code avec NVidia il faut donner le chemin des libs GNU (libX11, libm, libpthread, etc...)
[ "`basename $TRUST_CC_BASE`" = nvc++ ] && SYSLIBS=" -L/usr/lib/x86_64-linux-gnu "$SYSLIBS
#SYSLIBS=$SYSLIBS" $lz-lm -ldl"
SYSLIBS=$SYSLIBS" $lz -ldl"

#################################################
# Construction des fichiers $TRUST_ENV/make.lib?
#################################################
cd $TRUST_ENV
for fic in make.libsl make.libso make.liba make.libdll
do
   suffixe=${fic#make.lib}
   if [ $suffixe = a ]
   then
      echo $ECHO_OPTS "Libs = \$(LIB)\\"    > $fic
   else
      echo $ECHO_OPTS "Libs = \\"      > $fic
      # On ne se base plus sur le contenu de lib mais sur les make.include !
      # C'est mieux en cas d'une lib en trop ou en moins.
      END=hydturbspe
      for rep in `cat $TRUST_ENV/rep.TRUST | grep -v MAIN`
      do
         [ ! -f $TRUST_ROOT/$rep/make.include ] && echo "No make.include file find in $rep !" && exit -1
         NOM=`cat $TRUST_ROOT/$rep/make.include | $TRUST_Awk -F'/' '/Lib =/ {print $2}'`
         NOM=${NOM#lib}
         [ ${#NOM} = 0 ] && echo "No 'Lib =' in $rep/make.include !" && exit -1
         [ $NOM != $END ] && echo $ECHO_OPTS "\$(TRUST_LIB)/lib$NOM.$suffixe\\" >> $fic
      done
      # Problem seen on Ubuntu 13.x:
      # We put the library given by END at the end:
      if [ -f $TRUST_LIB/lib$END.$suffixe ]
      then
         echo $ECHO_OPTS "\$(TRUST_LIB)/lib$END.$suffixe\\" >> $fic
      fi
   fi
   # NB: 1.5.6: MED est place APRES PETSC car seg fault sinon avec -lz si place avant la librairie lcudart !
   echo $ECHO_OPTS "-L\$(TRUST_LIB) -lmfft -lmfft_c\\"            >> $fic
   echo $ECHO_OPTS "-lskit $METIS -L\$(TRUST_LATAFILTER)/lib -llatafilter\\"   >> $fic
   echo $ECHO_OPTS "-L\$(TRUST_ICOCOAPI)/lib -licocoapi\\"      >> $fic
   [ "$PETSC" != "" ] && echo $ECHO_OPTS "$PETSC \\"            >> $fic
   [ "$LAPACK" != "" ] && echo $ECHO_OPTS "$LAPACK \\"          >> $fic
   [ "$VC" != "" ] && echo $ECHO_OPTS "$VC \\"                  >> $fic
   [ "$EOS" != "" ] && echo $ECHO_OPTS "$EOS \\"                >> $fic
   [ "$COOLPROP" != "" ] && echo $ECHO_OPTS "$COOLPROP \\"      >> $fic
   [ "`ls ${TRUST_ROCALUTION}/lib/librocalution.* 2>/dev/null`" != "" ] && echo $ECHO_OPTS "-L\$(TRUST_ROCALUTION)/lib -lrocalution \\" >> $fic
   [ -f ${TRUST_OSQP_ROOT}/lib/libosqp.a ] && echo $ECHO_OPTS "-L\$(TRUST_OSQP_ROOT)/lib -losqp \\" >> $fic
   [ -f ${TRUST_OSQP_ROOT}/lib64/libosqp.a ] && echo $ECHO_OPTS "-L\$(TRUST_OSQP_ROOT)/lib64 -losqp \\" >> $fic
   [ "$LIBS_MEDC" != "" ]  && echo $ECHO_OPTS "${LIBS_MEDC} \\" >> $fic
   [ "$MEDLDFLAGS" != "" ] && echo $ECHO_OPTS "$MEDLDFLAGS \\"  >> $fic
   [ "$MPIFORT" != "" ]    && echo $ECHO_OPTS "$MPIFORT \\"     >> $fic
   # Ecriture de SYSLIBS desormais a la fin:
   [ "$SYSLIBS" != "" ]    && echo $ECHO_OPTS $SYSLIBS >> $fic
   
   # Verification qu'une librairie n'est pas en double
   a=`cat $fic | sort | uniq -c | grep -v 1`
   if [ ${#a} != 0 ]
   then
      echo "Error. Several make.include have the same library: $a"
      echo "You must fix it."
      exit -1
   fi
   echo "$TRUST_ENV/$fic updated."
done

python -c "import sys;sys.path.insert(0,'$TRUST_ROOT/bin/KSH');sys.dont_write_bytecode = True;from Createcmakefile import read_libs_from_makeliba;read_libs_from_makeliba()"

