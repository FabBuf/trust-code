#!/bin/bash

if [ "${project_directory}" = "" ]
then
   build=`dirname $0`/../../build/src
   build=`cd $build; pwd`
   project_directory=`cd $build/../..;pwd`
else
   build=`cd $project_directory/build/src;pwd` 
fi

makeincludedeps=$build/cmake.deps
[ ! -f $makeincludedeps ] && echo $makeincludedeps doesnt exist && exit
cp $makeincludedeps .

makeincludeatelier=$build/make.include.atelier
[ ! -f $makeincludeatelier ] && echo $makeincludeatelier does not exist && exit
cp $makeincludeatelier .
[ ! -f main.cpp ] && cp `dirname $0`/main.cpp . && chmod +w main.cpp
nn=`grep LD_LIBRARY_PATH make.include.atelier  | sed "s/#//"| awk -F: '{printf ("%s:",$2)}' | sed "s?\\${LD_LIBRARY_PATH}:??"`":\${LD_LIBRARY_PATH}"
#eval $nn
nproc=2
[ "$1" != "" ] && nproc=$1

if [ -O $0 ]
    then
    lib_dyn="lib_dyn"
    exe="exe"
else	
    lib_dyn=""
    exe=""
fi
echo "nproc=$nproc
include \$(TRUST_ENV)/make.\$(TRUST_ARCH_CC)\$(OPT) 
include \$(TRUST_ENV)/make.lib\$(LIB_EXTENSION)
include \$(TRUST_ENV)/make.all_Includes.TRUST " > makefile
cat $makeincludeatelier | grep -v project_directory >>makefile

# PL: Mecanisme de lock pour eviter un build concurentiel lors des tests ICoCo via ctest
flock="" && [ -f /usr/bin/flock ] && flock="/usr/bin/flock make.lock"

echo "couplage: $lib_dyn main.cpp makefile ld_env.sh $build/exec\$(OPT)/_TRUSTModule\$(OPT).\$(SL_EXTENSION)
	echo end >>  couplage.data
	@echo Linking.. 
	@if [ \"\$(TRUST_ARCH)\" = \"cygwin\" ] ; then cp  $build/exec\$(OPT)/_TRUSTModule\$(OPT).\$(SL_EXTENSION)  .; fi
	@\$(TRUST_CC) main.cpp -o couplage -I$build \$(Includes) -Wl,-rpath $build/exec\$(OPT) $build/exec\$(OPT)/_TRUSTModule\$(OPT).\$(SL_EXTENSION) \$(CppFlags) \$(Libs) \$(SYSLIBS)
$build/exec\$(OPT)/_TRUSTModule\$(OPT).\$(SL_EXTENSION): $lib_dyn
dynamique: $lib_dyn main.cpp makefile ld_env.sh $build/exec\$(OPT)/_TRUSTModule\$(OPT).\$(SL_EXTENSION)
	touch dynamique.data
	@echo Linking.. 

	@\$(TRUST_CC) main.cpp -o dynamique -I$build \$(Includes) -D_libtrio_='\"$build/exec\$(OPT)/_TRUSTModule\$(OPT).\$(SL_EXTENSION)\"' -Wl,-rpath $build/exec\$(OPT) $build/exec\$(OPT)/_TRUSTModule\$(OPT).\$(SL_EXTENSION) \$(CppFlags) \$(Libs) \$(SYSLIBS)
lib_dyn:
	@if [ \"\$(TRUST_ROOT)\" = \"\" ] ; then echo error TRUST_ROOT not set ; exit -1; fi
	(cd $build; [ -O . ] && (cd ../..;$flock \$(TRUST_ROOT)/bin/baltik/share/baltik/bin/baltik_build module_from_OPT ; echo \$OPT) ||( [ ! -O . ] && echo  No Compilation  ))
check: couplage
	env exec=./couplage trust couplage \$(nproc) 1>couplage.out 2>couplage.err
	if [ -f check.sh ]; then bash check.sh ;fi
	@echo ok
check_dynamique: dynamique
	env exec=./dynamique trust dynamique \$(nproc) 1>dynamique.out 2>dynamique.err
	if [ -f check.sh ]; then bash check.sh ;fi
	@echo ok
ld_env.sh: makefile
	@echo \"echo on charge ld_env.sh\" > ld_env.sh
	@echo export LD_LIBRARY_PATH=$nn >>ld_env.sh
exe:
	if [ \"\$(OPT)\" = \"_opt\" ]; then (cd $build/../..; $flock make optim);else (cd $build/../..; $flock make debug); fi
valgrind: couplage
	  env exec=./couplage VALGRIND=1 trust couplage \$(nproc)
clean:
	rm -f couplage couplage.data *dump *lata* *out *err *.progress *TU *log *son *sons *sauv *xyz convert_jdd *~ *dt_ev *stop make.include.atelier makefile ld_env.sh 
	if [ -f Clean.sh ] ; then bash Clean.sh ; fi">> makefile


sed "s?${project_directory}?\$(project_directory)?g" makefile > mm
echo "project_directory=$project_directory" > makefile
cat mm >> makefile
rm mm
